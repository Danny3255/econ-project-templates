import os


def create_empty_init_py(task):
    """Write __init__.py files with a warning string."""
    with open(task.outputs[0].get_bld().abspath(), 'w') as out_file:
        out_file.write(
            '"""Automatically created by Waf, do not change!!!\n\n"""'
        )
    return None


def create_empty_init_py_wrapper(ctx):
    # Create __init__.py files for package imports to work.
    project_root = ctx.env.PROJECT_PATHS['PROJECT_ROOT'].abspath()
    for root, dirs, dummy in os.walk(project_root):
        if os.path.isfile(os.path.join(root, '__init__.py')):
            src_dir_node = ctx.root.make_node(root)
            ctx(
                rule=create_empty_init_py,
                target=src_dir_node.get_bld().make_node('__init__.py'),
                source=src_dir_node.make_node('__init__.py'),
                name='init_{}'.format(root)
            )
        if root == project_root:
            # The root directory should not contain an __init__.py file!
            ctx(
                rule=create_empty_init_py,
                target=ctx.bldnode.make_node('__init__.py'),
                name='init_{}'.format(root)
            )
            # Iterate backwards so we don't skip elements when deleting.
            for i in range(len(dirs) - 1, -1, -1):
                for d in str(ctx.bldnode), 'fake', 'full', 'waflib':
                    try:
                        if (
                            dirs[i] == d
                            or dirs[i].startswith('.waf')
                            or dirs[i].startswith('waf-')
                        ):
                            del dirs[i]
                    except IndexError:
                        pass
        if '.svn' in dirs:
            dirs.remove('.svn')
        if '.git' in dirs:
            dirs.remove('.git')


def post_install(ctx):
    install_root = os.path.join(ctx.srcnode.abspath())
    ctx.install_files(
        os.path.join(install_root, '_downloads'),
        'src/latexpdf/tutorial-econ-project-templates.pdf',
        postpone=False
    )

    # Now the entire directory tree of the html build, except for hidden stuff.
    html_root = ctx.bldnode.find_node('src/html')
    for n in html_root.ant_glob('**', remove=False, quiet=True):
        rel_path = n.path_from(html_root)
        if not n.name.startswith('.') and not rel_path.startswith('.'):
            ctx.install_as(os.path.join(install_root, rel_path), n, postpone=False)


def build(ctx):

    create_empty_init_py_wrapper(ctx)
    ctx.recurse('examples')
    ctx.add_group()

    # Build the documentation in pdf (via LaTeX) and html format.
    ctx(
        features='sphinx',
        builders=['latexpdf', 'html'],
        source='conf.py'
    )

    # Install only after the build has finished.
    ctx.add_post_fun(post_install)
